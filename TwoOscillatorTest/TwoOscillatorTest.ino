
#include <Audio.h>
#include <Wire.h>
#include <SD.h>

float gain = 0;
float freq = 0;
int i = 0;
float k = 0;
float x = 0;
float p = 0;
int chaos_switch = 0;

// Create the Audio components.  These should be created in the
// order data flows, inputs/sources -> processing -> outputs
//

AudioOutputAnalog   audioOutput;        // DAC

AudioSynthWaveform  table;
AudioSynthWaveform  chaos;

float aWavetable[AUDIO_BLOCK_SAMPLES] = {
-0.35723385214806,
0.35723385214806,
0.050375521183014,
0.30685833096504,
0.44626152515411,
0.21783065795898,
0.7715510725975,
0.11037176847458,
0.98458921909332,
0.0077053904533386,
1.0700777769089,
-0.070077776908875,
1.0409430265427,
-0.11102080345154,
0.93266695737839,
-0.1137655377388,
0.79202437400818,
-0.086888492107391,
0.66371834278107,
-0.045470952987671,
0.5788654088974,
-0.0060889720916748,
0.54850506782532,
0.018182396888733,
0.56363445520401,
0.021235406398773,
0.60117810964584,
0.0049271583557129,
0.63354605436325,
-0.022513628005981,
0.63847559690475,
-0.049956798553467,
0.60601502656937,
-0.067453026771545,
0.5406591296196,
-0.069550156593323,
0.45835509896278,
-0.056796282529831,
0.37982469797134,
-0.035062164068222,
0.32275649905205,
-0.013056129217148,
0.29565414786339,
0.00099009275436401,
0.29536557197571,
0.0022687613964081,
0.30894890427589,
-0.00904580950737,
0.31896370649338,
-0.028106421232224,
0.31013023853302,
-0.047379359602928,
0.27490141987801,
-0.059529915452003,
0.21597573161125,
-0.060134135186672,
0.1449499130249,
-0.049242462962866,
0.077720165252686,
-0.031255174428225,
0.028401894494891,
-0.013192078098655,
0.0040354770608246,
-0.0020177385304123,
0.0020177385304123,
-0.0020177385304123,
0.011174339801073,
-0.013192078098655,
0.016045358031988,
-0.031255174428225,
0.0027774721384048,
-0.049242462962866,
-0.035573318600655,
-0.060134135186672,
-0.096311673521996,
-0.059529915452003,
-0.16799214482307,
-0.047379359602928,
-0.23464444279671,
-0.028106421232224,
-0.28181147575378,
-0.00904580950737,
-0.30217185616493,
0.0022687613964081,
-0.29862442612648,
0.00099009275436401,
-0.2835881114006,
-0.013056129217148,
-0.27463820576668,
-0.035062164068222,
-0.28796625137329,
-0.056796282529831,
-0.33200865983963,
-0.069550156593323,
-0.40365594625473,
-0.067453026771545,
-0.48860520124435,
-0.049956798553467,
-0.56600517034531,
-0.022513628005981,
-0.61595958471298,
0.0049271583557129,
-0.62734067440033,
0.021235406398773,
-0.60305225849152,
0.018182396888733,
-0.56059849262238,
-0.0060889720916748,
-0.52730548381805,
-0.045470952987671,
-0.531358897686,
-0.086888492107391,
-0.59137034416199,
-0.1137655377388,
-0.70788061618805,
-0.11102080345154,
-0.85984444618225,
-0.070077776908875,
-1.007705450058,
0.0077053904533386,
-1.1026663780212,
0.11037176847458,
-1.0997534990311,
0.21783065795898,
-0.97095048427582,
0.30685833096504,
-0.71446770429611,
0.35723385214806
};

float fibonacciIsh[AUDIO_BLOCK_SAMPLES] = {
  0 ,
0.18691122531891 ,
0.36616066098213 ,
0.53069984912872 ,
0.67464196681976 ,
0.79368829727173 ,
0.88539093732834 ,
0.94922751188278 ,
0.98648911714554 ,
1 ,
0.99371176958084 ,
0.9722193479538 ,
0.94026148319244 ,
0.9022604227066 ,
0.86195075511932 ,
0.822130382061 ,
0.78455299139023 ,
0.74995750188828 ,
0.71821963787079 ,
0.68858706951141 ,
0.65996432304382 ,
0.63119572401047 ,
0.60131359100342 ,
0.56971681118011 ,
0.53626263141632 ,
0.50126773118973 ,
0.46542778611183 ,
0.42967760562897 ,
0.39501884579659 ,
0.36234778165817 ,
0.33231025934219 ,
0.30520755052567 ,
0.28096559643745 ,
0.25916773080826 ,
0.2391442656517 ,
0.22009971737862 ,
0.20125584304333 ,
0.18198579549789 ,
0.16191704571247 ,
0.14098891615868 ,
0.1194551512599 ,
0.097834385931492 ,
0.076817981898785 ,
0.05715249851346 ,
0.039516557008028 ,
0.024412931874394 ,
0.012093449011445 ,
0.0025279750116169 ,
-0.0045787794515491 ,
-0.0097264833748341 ,
-0.013526478782296 ,
-0.016592942178249 ,
-0.01943770237267 ,
-0.02238560654223 ,
-0.025525411590934 ,
-0.028703572228551 ,
-0.031561736017466 ,
-0.033611167222261 ,
-0.034330867230892 ,
-0.033272799104452 ,
-0.030156243592501 ,
-0.024934940040112 ,
-0.017825894057751 ,
-0.0092947548255324 ,
-1.8385667506949e-15 ,
0.0092947548255324 ,
0.017825894057751 ,
0.024934940040112 ,
0.030156243592501 ,
0.033272799104452 ,
0.034330867230892 ,
0.033611167222261 ,
0.031561736017466 ,
0.028703572228551 ,
0.025525411590934 ,
0.02238560654223 ,
0.01943770237267 ,
0.016592942178249 ,
0.013526478782296 ,
0.0097264833748341 ,
0.0045787794515491 ,
-0.0025279750116169 ,
-0.012093449011445 ,
-0.024412931874394 ,
-0.039516557008028 ,
-0.05715249851346 ,
-0.076817981898785 ,
-0.097834385931492 ,
-0.1194551512599 ,
-0.14098891615868 ,
-0.16191704571247 ,
-0.18198579549789 ,
-0.20125584304333 ,
-0.22009971737862 ,
-0.2391442656517 ,
-0.25916773080826 ,
-0.28096559643745 ,
-0.30520755052567 ,
-0.33231025934219 ,
-0.36234778165817 ,
-0.39501884579659 ,
-0.42967760562897 ,
-0.46542778611183 ,
-0.50126773118973 ,
-0.53626263141632 ,
-0.56971681118011 ,
-0.60131359100342 ,
-0.63119572401047 ,
-0.65996432304382 ,
-0.68858706951141 ,
-0.71821963787079 ,
-0.74995750188828 ,
-0.78455299139023 ,
-0.822130382061 ,
-0.86195075511932 ,
-0.9022604227066 ,
-0.94026148319244 ,
-0.9722193479538 ,
-0.99371176958084 ,
-1 ,
-0.98648911714554 ,
-0.94922751188278 ,
-0.88539093732834 ,
-0.79368829727173 ,
-0.67464196681976 ,
-0.53069984912872 ,
-0.36616066098213 ,
-0.18691122531891
};

AudioMixer4         mixer;

// Create Audio connections between the components
//
AudioConnection c1(table, 0, mixer, 0); // chaotic oscillator output 0 to mixer input 0
AudioConnection c2(chaos, 0, mixer, 1);
AudioConnection c3(mixer, 0, audioOutput, 0); // mixer output 0 to DAC input 0


void setup() {
  Serial.begin(115200);
 
  // Audio connections require memory to work.  For more
  // detailed information, see the MemoryAndCpuUsage example
  AudioMemory(16);
  
 
  delay(3000);

  if( !table.begin( 0.5,555.5,TONE_TYPE_TABLE)) { 
    Serial.println("table.begin returned false"); 
  } else {
    table.table(aWavetable);
  };
  
  if( !chaos.begin( 0.5,555.5,TONE_TYPE_CHAOTIC)) {
        Serial.println("chaos.begin returned false"); 
  };
  
  pinMode(A5,INPUT);
  
  // start with some sound
  mixer.gain(0,1);
  mixer.gain(1,1);
  Serial.println("------------------------");

}

void loop() {
    gain = analogRead(A0) / 1024.0; // scales gain to 0...1
    k = (analogRead(A1) / 200.0) ; // scales k 0...5.0
    p = analogRead(A2) / 200.0;
    x = analogRead(A3) / 200.0;
    freq = (analogRead(A4) * 5) + 30.0; 
    
    chaos_switch = digitalRead(A5);
    Serial.println(chaos_switch,DEC);

//    table.amplitude(gain);
    table.frequency(freq);
    chaos.set_stdmap(k,x,p);
    chaos.amplitude(chaos_switch);
    chaos.frequency(freq);
    
    // a one-pot mixer
    mixer.gain(0,gain);
    mixer.gain(1,1-gain);
    
//    delay(random(1000)+10);
}


